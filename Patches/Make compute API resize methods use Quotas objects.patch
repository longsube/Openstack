From 5ebc60c48d4a8b6c7bac96d923626df9ae67a2b2 Mon Sep 17 00:00:00 2001
From: Matt Riedemann <mriedem@us.ibm.com>
Date: Mon, 17 Mar 2014 05:14:10 -0700
Subject: [PATCH] Make compute API resize methods use Quotas objects

The compute API's various resize methods are using the old-style quota
class to reserve and commit quota changes directly to the database. This
change uses quotas objects to do the reserve and commit instead so those
operations go through conductor for the database access.

Note that the long-term goal is to pass the quota object over RPC
rather than the reservations list, but that's a larger patch which
is not necessary for the bug fix.

Closes-Bug: #1262461

Change-Id: Id18357f449193d25287f32bb8ffbf26ee2194a22
---
 nova/compute/api.py                    |   66 ++++++++++++++++++--------------
 nova/tests/compute/test_compute_api.py |   48 +++++++++++++----------
 2 files changed, 64 insertions(+), 50 deletions(-)

diff --git a/nova/compute/api.py b/nova/compute/api.py
index 76c9910..68165db 100644
--- a/nova/compute/api.py
+++ b/nova/compute/api.py
@@ -59,6 +59,7 @@ from nova.objects import instance_group as instance_group_obj
 from nova.objects import instance_info_cache
 from nova.objects import keypair as keypair_obj
 from nova.objects import migration as migration_obj
+from nova.objects import quotas as quotas_obj
 from nova.objects import security_group as security_group_obj
 from nova.objects import service as service_obj
 from nova.openstack.common import excutils
@@ -1541,15 +1542,14 @@ class API(base.Base):
             LOG.info(_('Migration %s may have been confirmed during delete') %
                     migration.id, context=context, instance=instance)
             return
-        downsize_reservations = self._reserve_quota_delta(context,
-                                                          deltas)
+        quotas = self._reserve_quota_delta(context, deltas)
 
         self._record_action_start(context, instance,
                                   instance_actions.CONFIRM_RESIZE)
 
         self.compute_rpcapi.confirm_resize(context,
                 instance, migration,
-                src_host, downsize_reservations,
+                src_host, quotas.reservations,
                 cast=False)
 
     def _create_reservations(self, context, old_instance, new_instance_type_id,
@@ -2173,22 +2173,21 @@ class API(base.Base):
 
         # reverse quota reservation for increased resource usage
         deltas = self._reverse_upsize_quota_delta(context, migration)
-        reservations = self._reserve_quota_delta(context, deltas)
+        quotas = self._reserve_quota_delta(context, deltas)
 
         instance.task_state = task_states.RESIZE_REVERTING
         try:
             instance.save(expected_task_state=[None])
         except Exception:
             with excutils.save_and_reraise_exception():
-                QUOTAS.rollback(context, reservations)
+                quotas.rollback(context)
 
         migration.status = 'reverting'
         migration.save()
         # With cells, the best we can do right now is commit the reservations
         # immediately...
-        if CONF.cells.enable and reservations:
-            QUOTAS.commit(context, reservations)
-            reservations = []
+        if CONF.cells.enable:
+            quotas.commit(context)
 
         self._record_action_start(context, instance,
                                   instance_actions.REVERT_RESIZE)
@@ -2196,7 +2195,7 @@ class API(base.Base):
         self.compute_rpcapi.revert_resize(context, instance,
                                           migration,
                                           migration.dest_compute,
-                                          reservations)
+                                          quotas.reservations or [])
 
     @wrap_check_policy
     @check_instance_lock
@@ -2211,15 +2210,14 @@ class API(base.Base):
 
         # reserve quota only for any decrease in resource usage
         deltas = self._downsize_quota_delta(context, instance)
-        reservations = self._reserve_quota_delta(context, deltas)
+        quotas = self._reserve_quota_delta(context, deltas)
 
         migration.status = 'confirming'
         migration.save()
         # With cells, the best we can do right now is commit the reservations
         # immediately...
-        if CONF.cells.enable and reservations:
-            QUOTAS.commit(context, reservations)
-            reservations = []
+        if CONF.cells.enable:
+            quotas.commit(context)
 
         self._record_action_start(context, instance,
                                   instance_actions.CONFIRM_RESIZE)
@@ -2228,7 +2226,7 @@ class API(base.Base):
                                            instance,
                                            migration,
                                            migration.source_compute,
-                                           reservations)
+                                           quotas.reservations or [])
 
     @staticmethod
     def _resize_quota_delta(context, new_flavor,
@@ -2285,19 +2283,28 @@ class API(base.Base):
 
     @staticmethod
     def _reserve_quota_delta(context, deltas, project_id=None):
-        if not deltas:
-            return
-        return QUOTAS.reserve(context, project_id=project_id, **deltas)
+        """If there are deltas to reserve, construct a Quotas object and
+        reserve the deltas for the given project.
+
+        @param context:    The nova request context.
+        @param deltas:     A dictionary of the proposed delta changes.
+        @param project_id: Specify the project_id if current context
+                           is admin and admin wants to impact on
+                           common user's tenant.
+        @return: nova.objects.quotas.Quotas
+        """
+        quotas = quotas_obj.Quotas()
+        if deltas:
+            quotas.reserve(context, project_id=project_id, **deltas)
+        return quotas
 
     @staticmethod
-    def _resize_cells_support(context, reservations, instance,
+    def _resize_cells_support(context, quotas, instance,
                               current_instance_type, new_instance_type):
         """Special API cell logic for resize."""
-        if reservations:
-            # With cells, the best we can do right now is commit the
-            # reservations immediately...
-            QUOTAS.commit(context, reservations,
-                          project_id=instance.project_id)
+        # With cells, the best we can do right now is commit the
+        # reservations immediately...
+        quotas.commit(context)
         # NOTE(johannes/comstud): The API cell needs a local migration
         # record for later resize_confirm and resize_reverts to deal
         # with quotas.  We don't need source and/or destination
@@ -2363,9 +2370,10 @@ class API(base.Base):
         deltas = self._upsize_quota_delta(context, new_instance_type,
                                           current_instance_type)
         try:
-            reservations = self._reserve_quota_delta(context, deltas,
-                                                     project_id=instance[
-                                                         'project_id'])
+            project_id, user_id = quotas_obj.ids_from_instance(context,
+                                                               instance)
+            quotas = self._reserve_quota_delta(context, deltas,
+                                               project_id=project_id)
         except exception.OverQuota as exc:
             quotas = exc.kwargs['quotas']
             overs = exc.kwargs['overs']
@@ -2399,17 +2407,17 @@ class API(base.Base):
 
         if self.cell_type == 'api':
             # Commit reservations early and create migration record.
-            self._resize_cells_support(context, reservations, instance,
+            self._resize_cells_support(context, quotas, instance,
                                        current_instance_type,
                                        new_instance_type)
-            reservations = []
 
         self._record_action_start(context, instance, instance_actions.RESIZE)
 
         scheduler_hint = {'filter_properties': filter_properties}
         self.compute_task_api.resize_instance(context, instance,
                 extra_instance_updates, scheduler_hint=scheduler_hint,
-                flavor=new_instance_type, reservations=reservations)
+                flavor=new_instance_type,
+                reservations=quotas.reservations or [])
 
     @wrap_check_policy
     @check_instance_lock
diff --git a/nova/tests/compute/test_compute_api.py b/nova/tests/compute/test_compute_api.py
index cb42cbf..1d7e187 100644
--- a/nova/tests/compute/test_compute_api.py
+++ b/nova/tests/compute/test_compute_api.py
@@ -35,6 +35,7 @@ from nova.objects import external_event as external_event_obj
 from nova.objects import instance as instance_obj
 from nova.objects import instance_info_cache
 from nova.objects import migration as migration_obj
+from nova.objects import quotas as quotas_obj
 from nova.objects import service as service_obj
 from nova.openstack.common import timeutils
 from nova.openstack.common import uuidutils
@@ -418,13 +419,15 @@ class _ComputeAPIUnitTestMixIn(object):
             self.context, inst.uuid, 'finished').AndReturn(migration)
         self.compute_api._downsize_quota_delta(self.context, inst
                                                ).AndReturn('deltas')
+        fake_quotas = quotas_obj.Quotas.from_reservations(self.context,
+                                                          ['rsvs'])
         self.compute_api._reserve_quota_delta(self.context, 'deltas'
-                                              ).AndReturn('rsvs')
+                                              ).AndReturn(fake_quotas)
         self.compute_api._record_action_start(
             self.context, inst, instance_actions.CONFIRM_RESIZE)
         self.compute_api.compute_rpcapi.confirm_resize(
             self.context, inst, migration,
-            migration['source_compute'], 'rsvs', cast=False)
+            migration['source_compute'], fake_quotas.reservations, cast=False)
 
     def _test_delete_shelved_part(self, inst):
         image_service = self.compute_api.image_service
@@ -786,7 +789,6 @@ class _ComputeAPIUnitTestMixIn(object):
         self.mox.StubOutWithMock(self.compute_api, '_downsize_quota_delta')
         self.mox.StubOutWithMock(self.compute_api, '_reserve_quota_delta')
         self.mox.StubOutWithMock(fake_mig, 'save')
-        self.mox.StubOutWithMock(quota.QUOTAS, 'commit')
         self.mox.StubOutWithMock(self.compute_api, '_record_action_start')
         self.mox.StubOutWithMock(self.compute_api.compute_rpcapi,
                                  'confirm_resize')
@@ -800,9 +802,10 @@ class _ComputeAPIUnitTestMixIn(object):
                                                fake_inst).AndReturn('deltas')
 
         resvs = ['resvs']
+        fake_quotas = quotas_obj.Quotas.from_reservations(self.context, resvs)
 
         self.compute_api._reserve_quota_delta(self.context,
-                                              'deltas').AndReturn(resvs)
+                                              'deltas').AndReturn(fake_quotas)
 
         def _check_mig(expected_task_state=None):
             self.assertEqual('confirming', fake_mig.status)
@@ -810,14 +813,14 @@ class _ComputeAPIUnitTestMixIn(object):
         fake_mig.save().WithSideEffects(_check_mig)
 
         if self.cell_type:
-            quota.QUOTAS.commit(self.context, resvs)
-            resvs = []
+            fake_quotas.commit(self.context)
 
         self.compute_api._record_action_start(self.context, fake_inst,
                                               'confirmResize')
 
         self.compute_api.compute_rpcapi.confirm_resize(
-                self.context, fake_inst, fake_mig, 'compute-source', resvs)
+                self.context, fake_inst, fake_mig, 'compute-source',
+                [] if self.cell_type else fake_quotas.reservations)
 
         self.mox.ReplayAll()
 
@@ -848,7 +851,6 @@ class _ComputeAPIUnitTestMixIn(object):
         self.mox.StubOutWithMock(self.compute_api, '_reserve_quota_delta')
         self.mox.StubOutWithMock(fake_inst, 'save')
         self.mox.StubOutWithMock(fake_mig, 'save')
-        self.mox.StubOutWithMock(quota.QUOTAS, 'commit')
         self.mox.StubOutWithMock(self.compute_api, '_record_action_start')
         self.mox.StubOutWithMock(self.compute_api.compute_rpcapi,
                                  'revert_resize')
@@ -861,9 +863,10 @@ class _ComputeAPIUnitTestMixIn(object):
                 self.context, fake_mig).AndReturn('deltas')
 
         resvs = ['resvs']
+        fake_quotas = quotas_obj.Quotas.from_reservations(self.context, resvs)
 
         self.compute_api._reserve_quota_delta(self.context,
-                                              'deltas').AndReturn(resvs)
+                                              'deltas').AndReturn(fake_quotas)
 
         def _check_state(expected_task_state=None):
             self.assertEqual(task_states.RESIZE_REVERTING,
@@ -878,14 +881,14 @@ class _ComputeAPIUnitTestMixIn(object):
         fake_mig.save().WithSideEffects(_check_mig)
 
         if self.cell_type:
-            quota.QUOTAS.commit(self.context, resvs)
-            resvs = []
+            fake_quotas.commit(self.context)
 
         self.compute_api._record_action_start(self.context, fake_inst,
                                               'revertResize')
 
         self.compute_api.compute_rpcapi.revert_resize(
-                self.context, fake_inst, fake_mig, 'compute-dest', resvs)
+                self.context, fake_inst, fake_mig, 'compute-dest',
+                [] if self.cell_type else fake_quotas.reservations)
 
         self.mox.ReplayAll()
 
@@ -908,7 +911,6 @@ class _ComputeAPIUnitTestMixIn(object):
                                  '_reverse_upsize_quota_delta')
         self.mox.StubOutWithMock(self.compute_api, '_reserve_quota_delta')
         self.mox.StubOutWithMock(fake_inst, 'save')
-        self.mox.StubOutWithMock(quota.QUOTAS, 'rollback')
 
         self.context.elevated().AndReturn(self.context)
         migration_obj.Migration.get_by_instance_and_status(
@@ -918,14 +920,15 @@ class _ComputeAPIUnitTestMixIn(object):
         self.compute_api._reverse_upsize_quota_delta(
             self.context, fake_mig).AndReturn(delta)
         resvs = ['resvs']
+        fake_quotas = quotas_obj.Quotas.from_reservations(self.context, resvs)
         self.compute_api._reserve_quota_delta(
-            self.context, delta).AndReturn(resvs)
+            self.context, delta).AndReturn(fake_quotas)
 
         exc = exception.UnexpectedTaskStateError(
             actual=task_states.RESIZE_REVERTING, expected=None)
         fake_inst.save(expected_task_state=[None]).AndRaise(exc)
 
-        quota.QUOTAS.rollback(self.context, resvs)
+        fake_quotas.rollback(self.context)
 
         self.mox.ReplayAll()
         self.assertRaises(exception.UnexpectedTaskStateError,
@@ -955,7 +958,6 @@ class _ComputeAPIUnitTestMixIn(object):
         self.mox.StubOutWithMock(self.compute_api, '_upsize_quota_delta')
         self.mox.StubOutWithMock(self.compute_api, '_reserve_quota_delta')
         self.mox.StubOutWithMock(fake_inst, 'save')
-        self.mox.StubOutWithMock(quota.QUOTAS, 'commit')
         self.mox.StubOutWithMock(self.compute_api, '_record_action_start')
         self.mox.StubOutWithMock(self.compute_api.compute_task_api,
                                  'resize_instance')
@@ -976,12 +978,16 @@ class _ComputeAPIUnitTestMixIn(object):
         if (self.cell_type == 'compute' or
                 not (flavor_id_passed and same_flavor)):
             resvs = ['resvs']
+            project_id, user_id = quotas_obj.ids_from_instance(self.context,
+                                                               fake_inst)
+            fake_quotas = quotas_obj.Quotas.from_reservations(self.context,
+                                                              resvs)
 
             self.compute_api._upsize_quota_delta(
                     self.context, new_flavor,
                     current_flavor).AndReturn('deltas')
             self.compute_api._reserve_quota_delta(self.context, 'deltas',
-                    project_id=fake_inst['project_id']).AndReturn(resvs)
+                    project_id=project_id).AndReturn(fake_quotas)
 
             def _check_state(expected_task_state=None):
                 self.assertEqual(task_states.RESIZE_PREP,
@@ -1001,10 +1007,10 @@ class _ComputeAPIUnitTestMixIn(object):
             if not flavor_id_passed and not allow_mig_same_host:
                 filter_properties['ignore_hosts'].append(fake_inst['host'])
 
+            expected_reservations = fake_quotas.reservations
             if self.cell_type == 'api':
-                quota.QUOTAS.commit(self.context, resvs,
-                                    project_id=fake_inst['project_id'])
-                resvs = []
+                fake_quotas.commit(self.context)
+                expected_reservations = []
                 mig = migration_obj.Migration()
 
                 def _get_migration():
@@ -1033,7 +1039,7 @@ class _ComputeAPIUnitTestMixIn(object):
             self.compute_api.compute_task_api.resize_instance(
                     self.context, fake_inst, extra_kwargs,
                     scheduler_hint=scheduler_hint,
-                    flavor=new_flavor, reservations=resvs)
+                    flavor=new_flavor, reservations=expected_reservations)
 
         self.mox.ReplayAll()
 
-- 
1.7.9.5

